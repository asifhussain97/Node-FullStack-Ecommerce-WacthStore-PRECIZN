<%- include('../layouts/headeradmin.ejs') %>

<div id="layoutSidenav_content">
    <main>
        <div class="container-fluid px-4">
            <div class="p-0 d-flex justify-content-between container-fluid">
                <h1 class="mt-4 mb-3">Add Product</h1>
            </div>
            <form enctype="multipart/form-data" id="product-form">
                <section class="content-main">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Basic</h4>
                                </div>
                                <div class="card-body">
                                    <div class="mb-4">
                                        <label for="product_name" class="form-label">Product name</label>
                                        <input type="text" name="name" placeholder="Type here" class="form-control" id="product_title">
                                        <div class="error-message" style="color: red;" id="product_title-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="product_category" class="form-label">Product category</label>
                                        <select name="category" class="form-control" id="categorySelect" onchange="displaySubCategory(this.value, '<%= JSON.stringify(category) %>')">
                                            <option value="" selected></option>
                                            <% category.forEach((cat) => {
                                                 if(cat.is_listed) { %>
                                                    <option value="<%= cat._id %>"><%= cat.name %></option>
                                                <% }
                                            }); %> 
                                        </select>                                        
                                        <div class="error-message" style="color: red;" id="product_category-error"></div>
                                    </div>
                                    
                                    <div class="mb-4" id="subCategoryDiv">
                                        <!-- This div will be updated with sub-category options -->
                                    </div>
                                    
                                    <script>
                                        function displaySubCategory(selectedValue, categories) {

                                            const subCategoryDiv = document.getElementById('subCategoryDiv');
                                            const parsedCategories = JSON.parse(categories); // Parse JSON string to object
                                            console.log('Parsed Categories:', parsedCategories);

                                            const selectedCategory = parsedCategories.find(cat => cat._id === selectedValue);
                                            console.log('Selected Category:', selectedCategory);

                                            if (selectedCategory) {
                                                const subCategories = selectedCategory.sub_category.map(subCat => `
                                                    <option value="${subCat}">${subCat}</option>
                                                `).join('');

                                                const subCategoryHTML = `
                                                    <label for="product_subcategory" class="form-label">Product sub-category</label>
                                                    <select name="sub_category" class="form-control" id="subCategorySelect">
                                                        <option value="">${subCategories}</option>
                                                    </select>
                                                    <div class="error-message" style="color: red;" id="product_sub_category-error"></div>
                                                `;

                                                subCategoryDiv.innerHTML = subCategoryHTML;
                                            } else {
                                                subCategoryDiv.innerHTML = ''; // Clear sub-category options if no category is selected
                                            }
                                        }
                                    </script>
                                    
                                    
                                    <div class="mb-4">
                                        <label for="product_price" class="form-label">Price</label>
                                        <input type="text" name="price" placeholder="Type here" class="form-control" id="product_price">
                                        <div class="error-message" style="color: red;" id="product_price-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="product_discount" class="form-label">Discount rice</label>
                                        <input type="text" name="discount_price" placeholder="Type here" class="form-control" id="product_discount">
                                        <div class="error-message" style="color: red;" id="product_discount-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="product_quantity" class="form-label">Stock</label>
                                        <input type="text" name="stock" placeholder="Type here" class="form-control" id="product_quantity">
                                        <div class="error-message" style="color: red;" id="product_quantity-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="product_color" class="form-label">Colour</label>
                                        <input type="text" name="productColor" placeholder="Type here" class="form-control" id="product_color">
                                        <div class="error-message" style="color: red;" id="product_color-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="product_gender" class="form-label">Gender</label>
                                        <select name="gender" class="form-select" id="product_gender">
                                            <option value="">Select Gender</option>
                                            <option value="Men">Men</option>
                                            <option value="Women">Women</option>
                                            <option value="Kids">Kids</option>
                                        </select>
                                        <div class="error-message" style="color: red;" id="product_gender-error"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Full description</label>
                                        <textarea name="product_description" id="product_description" placeholder="Type here" class="form-control" rows="4"></textarea>
                                        <div class="error-message" style="color: red;" id="product_description-error"></div>
                                    </div>
                                </div>
                            </div> 
                        </div>
                        <div class="col-lg-3">
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Picture</h4>
                                </div>
                                <div class="card-body">
                                    
                                    <div class="card">
                                        <div class="card-body">
                                            
                                            <div class="images-container">
                                                <div class="image-preview-container d-flex flex-wrap justify-content-center">
                                                    <!-- Placeholder for default image -->
                                                    <div class="image-container border-1">
                                                        <img style="width: 100px; height: 100px; margin-bottom: 20px;" src="/uploadimage.svg" alt="Default" class="image-preview">
                                                    </div>
                                                </div>
                                                <input class="form-control" name="image"  multiple="multiple" type="file" onchange="displayImages(this)">
                                                <div class="error-message" style="color: red;" id="product_image-error"></div>
                                            </div>
                                            
                                            <script>
                                                function displayImages(input) {
                                                    const previewContainer = document.querySelector('.image-preview-container');
                                                    previewContainer.innerHTML = ''; // Clear previous previews
                                            
                                                    if (input.files && input.files.length > 0) {
                                                        for (let i = 0; i < input.files.length; i++) {
                                                            const reader = new FileReader();
                                                            reader.onload = function (e) {
                                                                const imagePreview = document.createElement('div');
                                                                imagePreview.classList.add('image-container');
                                                                const img = document.createElement('img');
                                                                img.src = e.target.result;
                                                                img.style.width = '100px';
                                                                img.style.height = '100px';
                                                                img.style.marginBottom = '20px';
                                                                img.style.marginRight = '5px'; 
                                                                img.style.marginLeft = '5px'; 
                                                                img.classList.add('image-preview');
                                                                imagePreview.appendChild(img);
                                                                previewContainer.appendChild(imagePreview);
                                                            };
                                                            reader.readAsDataURL(input.files[i]);
                                                        }
                                                    } else {
                                                        const defaultImagePreview = document.createElement('div');
                                                        defaultImagePreview.classList.add('image-container');
                                                        const defaultImg = document.createElement('img');
                                                        defaultImg.src = '/uploadimage.svg';
                                                        defaultImg.style.width = '100px';
                                                        defaultImg.style.height = '100px';
                                                        defaultImg.style.marginBottom = '20px';
                                                        defaultImg.style.marginRight = '5px'; 
                                                        defaultImg.style.marginLeft = '5px'; 
                                                        defaultImg.classList.add('image-preview');
                                                        defaultImagePreview.appendChild(defaultImg);
                                                        previewContainer.appendChild(defaultImagePreview);
                                                    }
                                                    
                                                }
                                            </script>
                                        </div>
                                    </div>
                                </div>
                            </div> 
                            <div>
                                <input type="submit" value="submit" class="btn btn-primary btn-md rounded font-sm hover-up">
                            </div>
                        </div>
                    </div>
                </section> 
            </form>
            <div style="position: relative; width: 100%;" class="mb-4 justify-content-center text-center">
                <% 
                if (typeof errorMessage !== 'undefined') {
                %>
                <p style="position: absolute; transform: translate(-50%, -50%); left: 50%; color: crimson; white-space: nowrap;"><%= errorMessage %></p>
                <%
                }
                %>
            </div>
        </div>
    </main>
    <script>
        function validateForm() {
            const subCategoryValue = document.getElementById('subCategorySelect').value;
            const subCategoryError = document.getElementById('product_sub_category-error');
            
            if (!subCategoryValue) {
                subCategoryError.textContent = 'Please select a sub-category.';
                return false; // Prevent form submission
            }
            
            // Clear any existing error message if a value is selected
            subCategoryError.textContent = '';
            return true; // Allow form submission
        }


        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('product-form');
            const allowedFormats = ['image/jpeg', 'image/png', 'image/webp', 'image/jpg'];

            form.addEventListener('submit', async function (event) {
                event.preventDefault(); // Prevent form submission

                const formIsValid = validateProductForm(); // Validate the product form

                if (formIsValid) {
                    await handleProductFormSubmission();
                }
            });

            function validateProductForm() {
                const product_title = document.getElementById("product_title").value.trim();
                const category = document.querySelector('select[name="category"]').value.trim();
                const product_price = document.getElementById("product_price").value.trim();
                const product_discount = document.getElementById("product_discount").value.trim();
                const product_quantity = document.getElementById("product_quantity").value.trim();
                const product_color = document.getElementById("product_color").value.trim();
                const product_gender = document.getElementById("product_gender").value.trim();
                const product_description = document.getElementById("product_description").value.trim();
                const imageInput = document.querySelector('input[name="image"]');

                const product_title_error = document.getElementById("product_title-error");
                const category_error = document.getElementById("product_category-error");
                const product_price_error = document.getElementById("product_price-error");
                const product_discount_error = document.getElementById("product_discount-error");
                const product_quantity_error = document.getElementById("product_quantity-error");
                const product_color_error = document.getElementById("product_color-error");
                const product_gender_error = document.getElementById("product_gender-error");
                const product_description_error = document.getElementById("product_description-error");
                const image_error = document.getElementById("product_image-error");

                let formIsValid = true;

                if (!(product_title.trim().length >= 2 && /^[a-zA-Z]/.test(product_title.trim()))) {
                    product_title_error.innerHTML = "Please enter product name";
                    formIsValid = false;
                } else {
                    product_title_error.innerHTML = "";
                }
                if (category.trim() === "" ) {
                    category_error.innerHTML = "Please select a category";
                    formIsValid = false;
                } else {
                    if(!validateForm()){
                        formIsValid = false;
                    }
                    category_error.innerHTML = "";
                } 
                                              
                if (isNaN(product_price) || product_price.trim() === "" || parseFloat(product_price) < 1) {
                    product_price_error.innerHTML = "Please enter a valid price";
                    formIsValid = false;
                } else {
                    product_price_error.innerHTML = "";
                }

                if (isNaN(product_discount) || product_discount.trim() === "" || parseFloat(product_discount) < 1) {
                    product_discount_error.innerHTML = "Please enter a valid discount";
                    formIsValid = false;
                } else if (parseFloat(product_discount) >= parseFloat(product_price)) {
                    product_discount_error.innerHTML = "Discount cannot be equal or greater than product price";
                    formIsValid = false;
                } else {
                    product_discount_error.innerHTML = "";
                }
                if (isNaN(product_quantity) || product_quantity.trim() === "" || parseFloat(product_quantity) < 0) {
                    product_quantity_error.innerHTML = "Please enter product quantity";
                    formIsValid = false;
                } else {
                    product_quantity_error.innerHTML = "";
                }
                if (!isNaN(product_color) || product_color.trim() === "") {
                    product_color_error.innerHTML = "Please enter a valid color";
                    formIsValid = false;
                } else {
                    product_color_error.innerHTML = "";
                }
                if (!isNaN(product_gender) || product_gender.trim() === "") {
                    product_gender_error.innerHTML = "Please enter a valid gender";
                    formIsValid = false;
                } else {
                    product_gender_error.innerHTML = "";
                }
                if (!(product_description.trim().length >= 2 && /^[a-zA-Z]/.test(product_description.trim()))) {
                    product_description_error.innerHTML = "Please enter product description";
                    formIsValid = false;
                } else {
                    product_description_error.innerHTML = "";
                }
                
                if (imageInput.files.length === 0) {
                    image_error.innerHTML = "Please select at least one image";
                    formIsValid = false;
                } else {
                    let validFormat = true;
                    for (let i = 0; i < imageInput.files.length; i++) {
                        if (!allowedFormats.includes(imageInput.files[i].type)) {
                            validFormat = false;
                            break;
                        }
                    }
                    if (!validFormat) {
                        image_error.innerHTML = "Please select correct image formate for all images";
                        formIsValid = false;
                    } else {
                        image_error.innerHTML = "";
                    }
                }
                return formIsValid;
            }

            async function handleProductFormSubmission() {
                const formData = new FormData(form);

                try {
                    const response = await fetch(`/admin/addProduct`, {
                        method: 'POST',
                        body: formData,
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok.');
                    }

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Product has been added',
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK',
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload(); // Redirect to a suitable page
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: result.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6', // Change the color as needed
                            confirmButtonText: 'OK',
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while adding the product',
                        icon: 'error',
                        confirmButtonColor: '#3085d6', // Change the color as needed
                        confirmButtonText: 'OK',
                    });
                }
            }
        });

    </script>
<%- include('../layouts/footeradmin.ejs') %>